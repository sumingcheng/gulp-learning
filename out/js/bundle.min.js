function throttle(i,n){let c=!1,o=0;return function(...t){var e=Date.now();if(c&&e-o<n)return;clearTimeout(s),c=!0,o=e;const s=setTimeout(()=>{i.apply(this,t),c=!1},n)}}function handleClick(){console.log("Button clicked")}const throttledClick=throttle(handleClick,1e3);document.querySelector("button").addEventListener("click",throttledClick);class MyPromise{constructor(t){this.status="pending",this.value=void 0,this.reason=void 0;var e=t=>{"pending"===this.status&&(this.status="fulfilled",this.value=t)},s=t=>{"pending"===this.status&&(this.status="rejected",this.reason=t)};try{t(e,s)}catch(t){s(t)}}then(t,e){"fulfilled"===this.status?t(this.value):"rejected"===this.status&&e(this.reason)}catch(t){"rejected"===this.status&&t(this.reason)}}const pr=new MyPromise((t,e)=>{t("success")});